
# ┌──────┐
# │ Math │
# └──────┘

# mk 表示 make Ketax
snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet



# dm 表示 Display math
snippet dm "Math" wA
$$
${1:${VISUAL}}
$$ $0
endsnippet


#- r 表示关键词使用正则表达式。正则表达式必须用 两个引号' '包围。比如 \'([1-9])day\'。

# ┌──────┐
# │ 分数 │
# └──────┘

#按下两次
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet


# 自动识别 数除数字
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet


# 识别括号内的公式
priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

# 最后一个与分数有关的 snippet 即使用你的选择来制作分数。你可以先用它选择一些文本，然后按下 Tab，打出/，然后再按下 Tab。
#snippet / "Fraction" iA
#\\frac{${VISUAL}}{$1}$0
#endsnippet

# sum 表示求和
snippet sum "sum" wA
\sum_{${1:i=1}}^{${2:n}}${3:${VISUAL}}$0
endsnippet

# infty 表示无穷
snippet ooo "infty" wA
\infty$0
endsnippet


#输入当前日期
snippet today "Date"
`date +%F`
endsnippet

# 输入当前时间
snippet time "Time"
`date +%H:%M:%S`
endsnippet


# 自动计算大小
snippet >= "greater than or equal" wA
\gep $1
endsnippet

snippet <= "less than or equal" wA
\leq $1
endsnippet



#自动识别下标
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet





# 平方根 square root
snippet sr "^2" iA
^2
endsnippet

# 立方根 cube root
snippet cb "^3" iA
^3
endsnippet

snippet compl "complement" iA
^{c}
endsnippet

snippet td "superscript" iA
^{$1}$0
endsnippet
#'https://github.com/SirVer/ultisnips'








# ┌─────┐
# │ box │
# └─────┘
snippet box "Box"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet






#后缀 snippet

#值得分享的还有后缀 snippet，如 phat → \hat{p}，zbar → \overline{z} 等。一个类似的 snippet 是后缀向量，如 v → \vec{v}。这些 snippet 真的非常节省时间，因为你可以借此跟上老师板书的节奏。

#priority 10
#snippet "bar" "bar" riA
#\overline{$1}$0
#endsnippet

#priority 100
#snippet "([a-zA-Z])bar" "bar" riA
#\overline{`!p snip.rv=match.group(1)`}
#endsnippet


priority 10
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet


#snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
#\vec{`!p snip.rv=match.group(1)`}
#endsnippet 

# ┌──────┐
# │ test │
# └──────┘
snippet \array "array" wA
\left
[\begin{array}{ccc}
$1
\end{array}
\right]
endsnippet

# 自动添加right
#snippet \left "Left" wA
#\left
#${1:${VISUAL}}
#\right${0}
#endsnippet


# 自动添加right
#snippet \begin "Begin" wA
#[\begin{$1}
#${2:${VISUAL}}
#\end]{$1}
#endsnippet


#^2
#square root

#^3
#cube root

#^c
#complement






# ┌────────────┐
# │ code block │
# └────────────┘
#python
snippet py` "python" wA
\`\`\` python
${1}
\`\`\`
endsnippet


#uml
snippet uml` "plantuml" wA
\`\`\` plantuml  
${1}
\`\`
endsnippet

#uml
snippet mer` "mermaid" wA
\`\`\` mermaid  
graph TD
${1}
\`\`\`
endsnippet



# text
snippet text "text" 
\`\`\` text
${1}
\`\`\`
endsnippet

# shell
snippet shell "shell" 
\`\`\` shell
${1}
\`\`\`
endsnippet


# link
#[${1:Link Text}](${2:http://example.com})
snippet link "link"
[${1}](${2:`!v substitute(@+, ' \|\n', '', 'g' )`})
endsnippet

#${1:${VISUAL}}

snippet plug "Insert a new plugin on my vimrc" w
Plug '${1:`!v substitute(@+, ' \|\n', '', 'g' )`}'
endsnippet


# zettelcasken
snippet idea` "zettelcasken"
---
date: `date +%F`
Tags: [${1}, ]
---

# `!p snip.rv = snip.fn.split('.')[0]`
${2}

---
# Reference
${0}

endsnippet

